/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IWavGame {
  export type IslandParamStruct = {
    requiredBurn: PromiseOrValue<BigNumberish>;
    requiredMint: PromiseOrValue<BigNumberish>;
    earlyBirdCutOff: PromiseOrValue<BigNumberish>;
    mintable: PromiseOrValue<BigNumberish>;
    burnable: PromiseOrValue<BigNumberish>;
  };

  export type IslandParamStructOutput = [
    number,
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    requiredBurn: number;
    requiredMint: number;
    earlyBirdCutOff: number;
    mintable: BigNumber;
    burnable: BigNumber;
  };
}

export interface IWavGameInterface extends utils.Interface {
  functions: {
    "collect(uint256,address,uint256)": FunctionFragment;
    "forwardValue()": FunctionFragment;
    "levelUp(uint256,uint256)": FunctionFragment;
    "setFeePerMint(uint256)": FunctionFragment;
    "setGame(uint256,(uint8,uint8,uint32,uint256,uint256)[])": FunctionFragment;
    "setTreasuries(uint256[],address[])": FunctionFragment;
    "transferWavNftOwnership(address)": FunctionFragment;
    "updateIsland(uint256,uint256,(uint8,uint8,uint32,uint256,uint256))": FunctionFragment;
    "wavMint(uint256,uint256,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "collect"
      | "forwardValue"
      | "levelUp"
      | "setFeePerMint"
      | "setGame"
      | "setTreasuries"
      | "transferWavNftOwnership"
      | "updateIsland"
      | "wavMint"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collect",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "forwardValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "levelUp",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePerMint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGame",
    values: [PromiseOrValue<BigNumberish>, IWavGame.IslandParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuries",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWavNftOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIsland",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IWavGame.IslandParamStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "wavMint",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forwardValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levelUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeePerMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWavNftOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIsland",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wavMint", data: BytesLike): Result;

  events: {};
}

export interface IWavGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWavGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collect(
      _gameID: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forwardValue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    levelUp(
      _gameID: PromiseOrValue<BigNumberish>,
      _newIslandID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeePerMint(
      _feePerMint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGame(
      _gameID: PromiseOrValue<BigNumberish>,
      _islands: IWavGame.IslandParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasuries(
      _gameIDs: PromiseOrValue<BigNumberish>[],
      _treasuries: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferWavNftOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateIsland(
      _gameID: PromiseOrValue<BigNumberish>,
      _islandID: PromiseOrValue<BigNumberish>,
      _islandParam: IWavGame.IslandParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wavMint(
      _gameID: PromiseOrValue<BigNumberish>,
      _islandID: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  collect(
    _gameID: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forwardValue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  levelUp(
    _gameID: PromiseOrValue<BigNumberish>,
    _newIslandID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeePerMint(
    _feePerMint: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGame(
    _gameID: PromiseOrValue<BigNumberish>,
    _islands: IWavGame.IslandParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasuries(
    _gameIDs: PromiseOrValue<BigNumberish>[],
    _treasuries: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferWavNftOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateIsland(
    _gameID: PromiseOrValue<BigNumberish>,
    _islandID: PromiseOrValue<BigNumberish>,
    _islandParam: IWavGame.IslandParamStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wavMint(
    _gameID: PromiseOrValue<BigNumberish>,
    _islandID: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collect(
      _gameID: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    forwardValue(overrides?: CallOverrides): Promise<void>;

    levelUp(
      _gameID: PromiseOrValue<BigNumberish>,
      _newIslandID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeePerMint(
      _feePerMint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGame(
      _gameID: PromiseOrValue<BigNumberish>,
      _islands: IWavGame.IslandParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuries(
      _gameIDs: PromiseOrValue<BigNumberish>[],
      _treasuries: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferWavNftOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateIsland(
      _gameID: PromiseOrValue<BigNumberish>,
      _islandID: PromiseOrValue<BigNumberish>,
      _islandParam: IWavGame.IslandParamStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    wavMint(
      _gameID: PromiseOrValue<BigNumberish>,
      _islandID: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    collect(
      _gameID: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forwardValue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    levelUp(
      _gameID: PromiseOrValue<BigNumberish>,
      _newIslandID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeePerMint(
      _feePerMint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGame(
      _gameID: PromiseOrValue<BigNumberish>,
      _islands: IWavGame.IslandParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasuries(
      _gameIDs: PromiseOrValue<BigNumberish>[],
      _treasuries: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferWavNftOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateIsland(
      _gameID: PromiseOrValue<BigNumberish>,
      _islandID: PromiseOrValue<BigNumberish>,
      _islandParam: IWavGame.IslandParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wavMint(
      _gameID: PromiseOrValue<BigNumberish>,
      _islandID: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collect(
      _gameID: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forwardValue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    levelUp(
      _gameID: PromiseOrValue<BigNumberish>,
      _newIslandID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeePerMint(
      _feePerMint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGame(
      _gameID: PromiseOrValue<BigNumberish>,
      _islands: IWavGame.IslandParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuries(
      _gameIDs: PromiseOrValue<BigNumberish>[],
      _treasuries: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferWavNftOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateIsland(
      _gameID: PromiseOrValue<BigNumberish>,
      _islandID: PromiseOrValue<BigNumberish>,
      _islandParam: IWavGame.IslandParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wavMint(
      _gameID: PromiseOrValue<BigNumberish>,
      _islandID: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
