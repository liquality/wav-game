/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IWavGame {
  export type LevelStruct = {
    requiredBurn: PromiseOrValue<BigNumberish>;
    requiredMint: PromiseOrValue<BigNumberish>;
    earlyBirdCutOff: PromiseOrValue<BigNumberish>;
    mintID: PromiseOrValue<BigNumberish>;
    burnID: PromiseOrValue<BigNumberish>;
    burnCount: PromiseOrValue<BigNumberish>;
    mintCount: PromiseOrValue<BigNumberish>;
  };

  export type LevelStructOutput = [
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    requiredBurn: number;
    requiredMint: number;
    earlyBirdCutOff: number;
    mintID: BigNumber;
    burnID: BigNumber;
    burnCount: BigNumber;
    mintCount: BigNumber;
  };

  export type LevelParamStruct = {
    requiredBurn: PromiseOrValue<BigNumberish>;
    requiredMint: PromiseOrValue<BigNumberish>;
    earlyBirdCutOff: PromiseOrValue<BigNumberish>;
    mintID: PromiseOrValue<BigNumberish>;
    burnID: PromiseOrValue<BigNumberish>;
  };

  export type LevelParamStructOutput = [
    number,
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    requiredBurn: number;
    requiredMint: number;
    earlyBirdCutOff: number;
    mintID: BigNumber;
    burnID: BigNumber;
  };
}

export interface WavGameInterface extends utils.Interface {
  functions: {
    "artistIDs(uint256)": FunctionFragment;
    "availablePayments(uint256)": FunctionFragment;
    "batchMint(address,uint256[],uint256[])": FunctionFragment;
    "collect(uint256,address,uint256)": FunctionFragment;
    "feePerMint()": FunctionFragment;
    "fetchEarlyBirdCollectors(uint256,uint256)": FunctionFragment;
    "fetchGame(uint256)": FunctionFragment;
    "forwardValue()": FunctionFragment;
    "getBalance(uint256)": FunctionFragment;
    "getFeePerMint()": FunctionFragment;
    "getLevel(uint256,uint256)": FunctionFragment;
    "getTreasury(uint256)": FunctionFragment;
    "getTrustedForwarder()": FunctionFragment;
    "initialize(address,address,uint256)": FunctionFragment;
    "isEarlyBirdCollector(uint256,uint256)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "levelUp(uint256,uint256)": FunctionFragment;
    "mint(address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setArtistGame(uint256,(uint8,uint8,uint32,uint256,uint256)[])": FunctionFragment;
    "setFeePerMint(uint256)": FunctionFragment;
    "setTreasuries(uint256[],address[])": FunctionFragment;
    "setTrustedForwarder(address)": FunctionFragment;
    "setWavNFT(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferWavNftOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateLevel(uint256,uint256,(uint8,uint8,uint32,uint256,uint256))": FunctionFragment;
    "wavMint(uint256,uint256,address,uint256)": FunctionFragment;
    "wavNFT()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "artistIDs"
      | "availablePayments"
      | "batchMint"
      | "collect"
      | "feePerMint"
      | "fetchEarlyBirdCollectors"
      | "fetchGame"
      | "forwardValue"
      | "getBalance"
      | "getFeePerMint"
      | "getLevel"
      | "getTreasury"
      | "getTrustedForwarder"
      | "initialize"
      | "isEarlyBirdCollector"
      | "isTrustedForwarder"
      | "levelUp"
      | "mint"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "setArtistGame"
      | "setFeePerMint"
      | "setTreasuries"
      | "setTrustedForwarder"
      | "setWavNFT"
      | "supportsInterface"
      | "transferOwnership"
      | "transferWavNftOwnership"
      | "unpause"
      | "updateLevel"
      | "wavMint"
      | "wavNFT"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "artistIDs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "availablePayments",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feePerMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchEarlyBirdCollectors",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchGame",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "forwardValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeePerMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLevel",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasury",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isEarlyBirdCollector",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "levelUp",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setArtistGame",
    values: [PromiseOrValue<BigNumberish>, IWavGame.LevelParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePerMint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuries",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedForwarder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWavNFT",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWavNftOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateLevel",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IWavGame.LevelParamStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "wavMint",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "wavNFT", values?: undefined): string;

  decodeFunctionResult(functionFragment: "artistIDs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availablePayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePerMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchEarlyBirdCollectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fetchGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forwardValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeePerMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLevel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEarlyBirdCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levelUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArtistGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeePerMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWavNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWavNftOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wavMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wavNFT", data: BytesLike): Result;

  events: {
    "ArtistGameSet(uint256,uint256)": EventFragment;
    "Collected(uint256,address,uint256,uint256)": EventFragment;
    "FeeSet(uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LevelUpdated(uint256,uint256)": EventFragment;
    "LeveledUp(uint256,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PaymentForwarded(uint256,address,uint256)": EventFragment;
    "SpecialMint(uint256,address,uint256,uint256)": EventFragment;
    "TreasurySet(uint256,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WavNFTSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArtistGameSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Collected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LevelUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeveledUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentForwarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpecialMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasurySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WavNFTSet"): EventFragment;
}

export interface ArtistGameSetEventObject {
  artistID: BigNumber;
  levelID: BigNumber;
}
export type ArtistGameSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  ArtistGameSetEventObject
>;

export type ArtistGameSetEventFilter = TypedEventFilter<ArtistGameSetEvent>;

export interface CollectedEventObject {
  artistID: BigNumber;
  to: string;
  amountSent: BigNumber;
  totalMinted: BigNumber;
}
export type CollectedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  CollectedEventObject
>;

export type CollectedEventFilter = TypedEventFilter<CollectedEvent>;

export interface FeeSetEventObject {
  oldFee: BigNumber;
  newFee: BigNumber;
}
export type FeeSetEvent = TypedEvent<[BigNumber, BigNumber], FeeSetEventObject>;

export type FeeSetEventFilter = TypedEventFilter<FeeSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LevelUpdatedEventObject {
  artistID: BigNumber;
  levelID: BigNumber;
}
export type LevelUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LevelUpdatedEventObject
>;

export type LevelUpdatedEventFilter = TypedEventFilter<LevelUpdatedEvent>;

export interface LeveledUpEventObject {
  artistID: BigNumber;
  collector: string;
  newLevelID: BigNumber;
  totalMinted: BigNumber;
}
export type LeveledUpEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  LeveledUpEventObject
>;

export type LeveledUpEventFilter = TypedEventFilter<LeveledUpEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PaymentForwardedEventObject {
  artistID: BigNumber;
  to: string;
  amount: BigNumber;
}
export type PaymentForwardedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  PaymentForwardedEventObject
>;

export type PaymentForwardedEventFilter =
  TypedEventFilter<PaymentForwardedEvent>;

export interface SpecialMintEventObject {
  artistID: BigNumber;
  collector: string;
  id: BigNumber;
  amount: BigNumber;
}
export type SpecialMintEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  SpecialMintEventObject
>;

export type SpecialMintEventFilter = TypedEventFilter<SpecialMintEvent>;

export interface TreasurySetEventObject {
  artistID: BigNumber;
  treasury: string;
}
export type TreasurySetEvent = TypedEvent<
  [BigNumber, string],
  TreasurySetEventObject
>;

export type TreasurySetEventFilter = TypedEventFilter<TreasurySetEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WavNFTSetEventObject {
  old: string;
  wavNFT: string;
}
export type WavNFTSetEvent = TypedEvent<[string, string], WavNFTSetEventObject>;

export type WavNFTSetEventFilter = TypedEventFilter<WavNFTSetEvent>;

export interface WavGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WavGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    artistIDs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    availablePayments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    batchMint(
      _recipient: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collect(
      _artistID: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feePerMint(overrides?: CallOverrides): Promise<[BigNumber]>;

    fetchEarlyBirdCollectors(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    fetchGame(
      _artistID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IWavGame.LevelStructOutput[], string]>;

    forwardValue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalance(
      _artistID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFeePerMint(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLevel(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IWavGame.LevelStructOutput]>;

    getTreasury(
      _artistID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<[string] & { forwarder: string }>;

    initialize(
      _wavNFT: PromiseOrValue<string>,
      _trustedForwarder: PromiseOrValue<string>,
      _feePerMint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isEarlyBirdCollector(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    levelUp(
      _artistID: PromiseOrValue<BigNumberish>,
      _newLevelID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mint(
      _recipient: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setArtistGame(
      _artistID: PromiseOrValue<BigNumberish>,
      _levels: IWavGame.LevelParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeePerMint(
      _feePerMint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasuries(
      _artistIDs: PromiseOrValue<BigNumberish>[],
      _treasuries: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrustedForwarder(
      _trustedForwarder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWavNFT(
      _wavNft: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferWavNftOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateLevel(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      _levelParam: IWavGame.LevelParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wavMint(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wavNFT(overrides?: CallOverrides): Promise<[string]>;
  };

  artistIDs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  availablePayments(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchMint(
    _recipient: PromiseOrValue<string>,
    _ids: PromiseOrValue<BigNumberish>[],
    _amount: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collect(
    _artistID: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feePerMint(overrides?: CallOverrides): Promise<BigNumber>;

  fetchEarlyBirdCollectors(
    _artistID: PromiseOrValue<BigNumberish>,
    _levelID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  fetchGame(
    _artistID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[IWavGame.LevelStructOutput[], string]>;

  forwardValue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalance(
    _artistID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeePerMint(overrides?: CallOverrides): Promise<BigNumber>;

  getLevel(
    _artistID: PromiseOrValue<BigNumberish>,
    _levelID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IWavGame.LevelStructOutput>;

  getTreasury(
    _artistID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

  initialize(
    _wavNFT: PromiseOrValue<string>,
    _trustedForwarder: PromiseOrValue<string>,
    _feePerMint: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isEarlyBirdCollector(
    _artistID: PromiseOrValue<BigNumberish>,
    _levelID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedForwarder(
    forwarder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  levelUp(
    _artistID: PromiseOrValue<BigNumberish>,
    _newLevelID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mint(
    _recipient: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setArtistGame(
    _artistID: PromiseOrValue<BigNumberish>,
    _levels: IWavGame.LevelParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeePerMint(
    _feePerMint: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasuries(
    _artistIDs: PromiseOrValue<BigNumberish>[],
    _treasuries: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrustedForwarder(
    _trustedForwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWavNFT(
    _wavNft: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferWavNftOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateLevel(
    _artistID: PromiseOrValue<BigNumberish>,
    _levelID: PromiseOrValue<BigNumberish>,
    _levelParam: IWavGame.LevelParamStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wavMint(
    _artistID: PromiseOrValue<BigNumberish>,
    _levelID: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wavNFT(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    artistIDs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    availablePayments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchMint(
      _recipient: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    collect(
      _artistID: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    feePerMint(overrides?: CallOverrides): Promise<BigNumber>;

    fetchEarlyBirdCollectors(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    fetchGame(
      _artistID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IWavGame.LevelStructOutput[], string]>;

    forwardValue(overrides?: CallOverrides): Promise<void>;

    getBalance(
      _artistID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeePerMint(overrides?: CallOverrides): Promise<BigNumber>;

    getLevel(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IWavGame.LevelStructOutput>;

    getTreasury(
      _artistID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

    initialize(
      _wavNFT: PromiseOrValue<string>,
      _trustedForwarder: PromiseOrValue<string>,
      _feePerMint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isEarlyBirdCollector(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    levelUp(
      _artistID: PromiseOrValue<BigNumberish>,
      _newLevelID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      _recipient: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setArtistGame(
      _artistID: PromiseOrValue<BigNumberish>,
      _levels: IWavGame.LevelParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setFeePerMint(
      _feePerMint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuries(
      _artistIDs: PromiseOrValue<BigNumberish>[],
      _treasuries: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedForwarder(
      _trustedForwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWavNFT(
      _wavNft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferWavNftOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateLevel(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      _levelParam: IWavGame.LevelParamStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    wavMint(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    wavNFT(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ArtistGameSet(uint256,uint256)"(
      artistID?: PromiseOrValue<BigNumberish> | null,
      levelID?: PromiseOrValue<BigNumberish> | null
    ): ArtistGameSetEventFilter;
    ArtistGameSet(
      artistID?: PromiseOrValue<BigNumberish> | null,
      levelID?: PromiseOrValue<BigNumberish> | null
    ): ArtistGameSetEventFilter;

    "Collected(uint256,address,uint256,uint256)"(
      artistID?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      amountSent?: PromiseOrValue<BigNumberish> | null,
      totalMinted?: null
    ): CollectedEventFilter;
    Collected(
      artistID?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      amountSent?: PromiseOrValue<BigNumberish> | null,
      totalMinted?: null
    ): CollectedEventFilter;

    "FeeSet(uint256,uint256)"(
      oldFee?: PromiseOrValue<BigNumberish> | null,
      newFee?: PromiseOrValue<BigNumberish> | null
    ): FeeSetEventFilter;
    FeeSet(
      oldFee?: PromiseOrValue<BigNumberish> | null,
      newFee?: PromiseOrValue<BigNumberish> | null
    ): FeeSetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LevelUpdated(uint256,uint256)"(
      artistID?: PromiseOrValue<BigNumberish> | null,
      levelID?: PromiseOrValue<BigNumberish> | null
    ): LevelUpdatedEventFilter;
    LevelUpdated(
      artistID?: PromiseOrValue<BigNumberish> | null,
      levelID?: PromiseOrValue<BigNumberish> | null
    ): LevelUpdatedEventFilter;

    "LeveledUp(uint256,address,uint256,uint256)"(
      artistID?: PromiseOrValue<BigNumberish> | null,
      collector?: PromiseOrValue<string> | null,
      newLevelID?: PromiseOrValue<BigNumberish> | null,
      totalMinted?: null
    ): LeveledUpEventFilter;
    LeveledUp(
      artistID?: PromiseOrValue<BigNumberish> | null,
      collector?: PromiseOrValue<string> | null,
      newLevelID?: PromiseOrValue<BigNumberish> | null,
      totalMinted?: null
    ): LeveledUpEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PaymentForwarded(uint256,address,uint256)"(
      artistID?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): PaymentForwardedEventFilter;
    PaymentForwarded(
      artistID?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): PaymentForwardedEventFilter;

    "SpecialMint(uint256,address,uint256,uint256)"(
      artistID?: PromiseOrValue<BigNumberish> | null,
      collector?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): SpecialMintEventFilter;
    SpecialMint(
      artistID?: PromiseOrValue<BigNumberish> | null,
      collector?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): SpecialMintEventFilter;

    "TreasurySet(uint256,address)"(
      artistID?: PromiseOrValue<BigNumberish> | null,
      treasury?: PromiseOrValue<string> | null
    ): TreasurySetEventFilter;
    TreasurySet(
      artistID?: PromiseOrValue<BigNumberish> | null,
      treasury?: PromiseOrValue<string> | null
    ): TreasurySetEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WavNFTSet(address,address)"(
      old?: null,
      wavNFT?: null
    ): WavNFTSetEventFilter;
    WavNFTSet(old?: null, wavNFT?: null): WavNFTSetEventFilter;
  };

  estimateGas: {
    artistIDs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    availablePayments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchMint(
      _recipient: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collect(
      _artistID: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feePerMint(overrides?: CallOverrides): Promise<BigNumber>;

    fetchEarlyBirdCollectors(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchGame(
      _artistID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forwardValue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalance(
      _artistID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeePerMint(overrides?: CallOverrides): Promise<BigNumber>;

    getLevel(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasury(
      _artistID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _wavNFT: PromiseOrValue<string>,
      _trustedForwarder: PromiseOrValue<string>,
      _feePerMint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isEarlyBirdCollector(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levelUp(
      _artistID: PromiseOrValue<BigNumberish>,
      _newLevelID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mint(
      _recipient: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setArtistGame(
      _artistID: PromiseOrValue<BigNumberish>,
      _levels: IWavGame.LevelParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeePerMint(
      _feePerMint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasuries(
      _artistIDs: PromiseOrValue<BigNumberish>[],
      _treasuries: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrustedForwarder(
      _trustedForwarder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWavNFT(
      _wavNft: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferWavNftOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateLevel(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      _levelParam: IWavGame.LevelParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wavMint(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wavNFT(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    artistIDs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    availablePayments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchMint(
      _recipient: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      _artistID: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feePerMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchEarlyBirdCollectors(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchGame(
      _artistID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forwardValue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(
      _artistID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeePerMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLevel(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasury(
      _artistID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _wavNFT: PromiseOrValue<string>,
      _trustedForwarder: PromiseOrValue<string>,
      _feePerMint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isEarlyBirdCollector(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    levelUp(
      _artistID: PromiseOrValue<BigNumberish>,
      _newLevelID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      _recipient: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setArtistGame(
      _artistID: PromiseOrValue<BigNumberish>,
      _levels: IWavGame.LevelParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeePerMint(
      _feePerMint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuries(
      _artistIDs: PromiseOrValue<BigNumberish>[],
      _treasuries: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedForwarder(
      _trustedForwarder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWavNFT(
      _wavNft: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferWavNftOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateLevel(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      _levelParam: IWavGame.LevelParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wavMint(
      _artistID: PromiseOrValue<BigNumberish>,
      _levelID: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wavNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
